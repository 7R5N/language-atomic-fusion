'name': 'Atomic.Fusion'
'scopeName': 'source.fusion'

'fileTypes': [
	'txt.fusion'
]

'patterns': [
	{
		'include': '#fusion-comment-tags'
	}
	{
		'include': '#fusion-structure-tags'
	}
	{
		'include': '#fusion-variable-tags'
	}
	{
		'include': '#fusion-expression-tags'
	}
]

'repository':
	'fusion-comment-tags':
		'begin': '// '
		'beginCaptures':
			'0':
				'name': 'punctuation.definition.comment.begin.fusion'
		'name': 'comment.block.fusion'

	'fusion-structure-tags':
		'begin': ''
		'beginCaptures':
			'0':
				'name': 'punctuation.section.tag.fusion'
		'end': ''
		'endCaptures':
			'0':
				'name': 'punctuation.section.tag.fusion'
		'name': 'meta.tag.template.value.fusion'
		'patterns': [
			{
				'include': '#fusion-constants'
			}
			{
				'include': '#fusion-operators'
			}
			{
				'include': '#fusion-structure-intro'
			}
			{
				'include': '#fusion-structure-styleguide'
			}
			{
				'include': '#fusion-structure-props'
			}
			{
				'include': '#fusion-structure-renderer'
			}
		]

	//'fusion-variable-tags':
	//	'begin': '{(?:{|(?<={#))'
	//	'beginCaptures':
	//		'0':
	//			'name': 'punctuation.section.tag.fusion'
	//	'end': '}(?:}|(?=#}))'
	//	'endCaptures':
	//		'0':
	//			'name': 'punctuation.section.tag.fusion'
	//	'name': 'meta.tag.template.value.fusion'
	//	'patterns': [
	//		{
	//			'include': '#fusion-constants'
	//		}
	//		{
	//			'include': '#fusion-operators'
	//		}
	//		{
	//			'include': '#fusion-functions-warg'
	//		}
	//		{
	//			'include': '#fusion-functions'
	//		}
	//		{
	//			'include': '#fusion-macros'
	//		}
	//		{
	//			'include': '#fusion-objects'
	//		}
	//		{
	//			'include': '#fusion-properties'
	//		}
	//		{
	//			'include': '#fusion-filters-warg'
	//		}
	//		{
	//			'include': '#fusion-filters'
	//		}
	//		{
	//			'include': '#fusion-filters-warg-ud'
	//		}
	//		{
	//			'include': '#fusion-filters-ud'
	//		}
	//		{
	//			'include': '#fusion-strings'
	//		}
	//		{
	//			'include': '#fusion-arrays'
	//		}
	//		{
	//			'include': '#fusion-hashes'
	//		}
	//	]

	//'fusion-expression-tags':
	//	'begin': '(?:{|(?<={#))%'
	//	'beginCaptures':
	//		'0':
	//			'name': 'punctuation.section.tag.fusion'
	//	'end': '%(?:}|(?=#}))'
	//	'endCaptures':
	//		'0':
	//			'name': 'punctuation.section.tag.fusion'
	//	'name': 'meta.tag.template.value.fusion'
	//	'patterns': [
	//		{
	//			'include': '#fusion-keyword'
	//		}
	//		{
	//			'include': '#fusion-constants'
	//		}
	//		{
	//			'include': '#fusion-operators'
	//		}
	//		{
	//			'include': '#fusion-functions-warg'
	//		}
	//		{
	//			'include': '#fusion-functions'
	//		}
	//		{
	//			'include': '#fusion-macros'
	//		}
	//		{
	//			'include': '#fusion-objects'
	//		}
	//		{
	//			'include': '#fusion-properties'
	//		}
	//		{
	//			'include': '#fusion-filters-warg'
	//		}
	//		{
	//			'include': '#fusion-filters'
	//		}
	//		{
	//			'include': '#fusion-filters-warg-ud'
	//		}
	//		{
	//			'include': '#fusion-filters-ud'
	//		}
	//		{
	//			'include': '#fusion-strings'
	//		}
	//		{
	//			'include': '#fusion-arrays'
	//		}
	//		{
	//			'include': '#fusion-hashes'
	//		}
	//	]

	# Patterns
	'fusion-constants':
		'patterns': [
			{
				'name': 'constant.language.fusion'
				'match': '(?i)(?<=[\\s\\[\\(\\{:,])(?:true|false|null|none)(?=[\\s\\)\\]\\}\\,])'
			}
			{
				'name': 'constant.numeric.fusion'
				'match': '(?<=[\\s\\[\\(\\{:,]|\\.\\.|\\*\\*)[0-9]+(?:\\.[0-9]+)?(?=[\\s\\)\\]\\}\\,]|\\.\\.|\\*\\*)'
			}
		]

	'fusion-operators':
		'patterns': [
			{
				'captures':
					'1':
						'name': 'keyword.operator.arithmetic.fusion'
				'match': '(?<=\\s)(\\+|-|\\*|/|%|//)(?=\\s)'
			}
			{
				'captures':
					'1':
						'name': 'keyword.operator.assignment.fusion'
				'match': '(?<=\\s)(=|~)(?=\\s)'
			}
			{
				'captures':
					'1':
						'name': 'keyword.operator.bitwise.fusion'
				'match': '(?<=\\s)(&|\\||\\^)(?=\\s)'
			}
			{
				'captures':
					'1':
						'name': 'keyword.operator.comparison.fusion'
				'match': '(?<=\\s)((?:!|=)=|<=?|>=?|i(?:s|n))(?=\\s)'
			}
			{
				'captures':
					'1':
						'name': 'keyword.operator.logical.fusion'
				'match': '(?<=\\s)(not|or|and|\\?|:)(?=\\s)'
			}
			{
				'captures':
					'0':
						'name': 'keyword.operator.arithmetic.fusion'
				'match': '(?<=[a-zA-Z0-9_\\x{7f}-\\x{ff}\\]\\)\'"])\\*\\*(?=[a-zA-Z0-9_\\x{7f}-\\x{ff}\'"])'
			}
			{
				'captures':
					'0':
						'name': 'keyword.operator.other.fusion'
				'match': '(?<=[a-zA-Z0-9_\\x{7f}-\\x{ff}\\]\\)\'"])\\.\\.(?=[a-zA-Z0-9_\\x{7f}-\\x{ff}\'"])'
			}
			{
				'captures':
					'0':
						'name': 'keyword.operator.other.fusion'
				'match': '(?<=[a-zA-Z0-9_\\x{7f}-\\x{ff}\\]\\}\\)\'"])\\|(?=[a-zA-Z_\\x{7f}-\\x{ff}])'
			}
		]

	'fusion-functions-warg':
		'begin': '(?<=[\\s\\(\\[\\{:,])(attribute|block|constant|cycle|date|divisibleby|dump|parent|random|range|sameas|template_from_string)(\\()'
		'beginCaptures':
			'1':
				'name': 'support.function.fusion'
			'2':
				'name': 'punctuation.definition.parameters.begin.fusion'
		'end': '\\)'
		'endCaptures':
			'0':
				'name': 'punctuation.definition.parameters.end.fusion'
		'patterns': [
			{
				'include': '#fusion-constants'
			}
			{
				'include': '#fusion-functions-warg'
			}
			{
				'include': '#fusion-functions'
			}
			{
				'include': '#fusion-macros'
			}
			{
				'include': '#fusion-objects'
			}
			{
				'include': '#fusion-properties'
			}
			{
				'include': '#fusion-filters-warg'
			}
			{
				'include': '#fusion-filters'
			}
			{
				'include': '#fusion-filters-warg-ud'
			}
			{
				'include': '#fusion-filters-ud'
			}
			{
				'include': '#fusion-strings'
			}
			{
				'include': '#fusion-arrays'
			}
		]
		'contentName': 'meta.function.arguments.fusion'

	'fusion-properties':
		'patterns': [
			{
				'captures':
					'1':
						'name': 'punctuation.separator.property.fusion'
					'2':
						'name': 'variable.other.property.fusion'
				'match': '(?x)\n												(?<=[a-zA-Z0-9_\\x{7f}-\\x{ff}])\n												(\\.)([a-zA-Z_\\x{7f}-\\x{ff}][a-zA-Z0-9_\\x{7f}-\\x{ff}]*)\n												(?=[\\.\\s\\|\\[\\)\\]\\}:,])\n										'
			}
			{
				'begin': '(?x)\n												(?<=[a-zA-Z0-9_\\x{7f}-\\x{ff}])\n												(\\.)([a-zA-Z_\\x{7f}-\\x{ff}][a-zA-Z0-9_\\x{7f}-\\x{ff}]*)\n												(\\()\n										'
				'beginCaptures':
					'1':
						'name': 'punctuation.separator.property.fusion'
					'2':
						'name': 'variable.other.property.fusion'
					'3':
						'name': 'punctuation.definition.parameters.begin.fusion'
				'end': '\\)'
				'endCaptures':
					'0':
						'name': 'punctuation.definition.parameters.end.fusion'
				'patterns': [
					{
						'include': '#fusion-constants'
					}
					{
						'include': '#fusion-functions-warg'
					}
					{
						'include': '#fusion-functions'
					}
					{
						'include': '#fusion-macros'
					}
					{
						'include': '#fusion-objects'
					}
					{
						'include': '#fusion-properties'
					}
					{
						'include': '#fusion-filters-warg'
					}
					{
						'include': '#fusion-filters'
					}
					{
						'include': '#fusion-filters-warg-ud'
					}
					{
						'include': '#fusion-filters-ud'
					}
					{
						'include': '#fusion-strings'
					}
					{
						'include': '#fusion-arrays'
					}
				]
				'contentName': 'meta.function.arguments.fusion'
			}
			{
				'captures':
					'1':
						'name': 'punctuation.section.array.begin.fusion'
					'2':
						'name': 'variable.other.property.fusion'
					'3':
						'name': 'punctuation.section.array.end.fusion'
					'4':
						'name': 'punctuation.section.array.begin.fusion'
					'5':
						'name': 'variable.other.property.fusion'
					'6':
						'name': 'punctuation.section.array.end.fusion'
					'7':
						'name': 'punctuation.section.array.begin.fusion'
					'8':
						'name': 'variable.other.property.fusion'
					'9':
						'name': 'punctuation.section.array.end.fusion'
				'match': '(?x)\n												(?<=[a-zA-Z0-9_\\x{7f}-\\x{ff}\\]])\n												(?:\n														(\\[)(\'[a-zA-Z_\\x{7f}-\\x{ff}][a-zA-Z0-9_\\x{7f}-\\x{ff}]*\')(\\])\n														|(\\[)("[a-zA-Z_\\x{7f}-\\x{ff}][a-zA-Z0-9_\\x{7f}-\\x{ff}]*")(\\])\n														|(\\[)([a-zA-Z_\\x{7f}-\\x{ff}][a-zA-Z0-9_\\x{7f}-\\x{ff}]*)(\\])\n												)\n										'
			}
		]

	'fusion-strings':
		'patterns': [
			{
				'begin': '(?:(?<!\\\\)|(?<=\\\\\\\\))\''
				'beginCaptures':
					'0':
						'name': 'punctuation.definition.string.begin.fusion'
				'end': '(?:(?<!\\\\)|(?<=\\\\\\\\))\''
				'endCaptures':
					'0':
						'name': 'punctuation.definition.string.end.fusion'
				'name': 'string.quoted.single.fusion'
			}
			{
				'begin': '(?:(?<!\\\\)|(?<=\\\\\\\\))"'
				'beginCaptures':
					'0':
						'name': 'punctuation.definition.string.begin.fusion'
				'end': '(?:(?<!\\\\)|(?<=\\\\\\\\))"'
				'endCaptures':
					'0':
						'name': 'punctuation.definition.string.end.fusion'
				'name': 'string.quoted.double.fusion'
			}
		]

	'fusion-arrays':
		'begin': '(?<=[\\s\\(\\{\\[:,])\\['
		'beginCaptures':
			'0':
				'name': 'punctuation.section.array.begin.fusion'
		'end': '\\]'
		'endCaptures':
			'0':
				'name': 'punctuation.section.array.end.fusion'
		'patterns': [
			{
				'include': '#fusion-arrays'
			}
			{
				'include': '#fusion-hashes'
			}
			{
				'include': '#fusion-constants'
			}
			{
				'include': '#fusion-strings'
			}
			{
				'include': '#fusion-functions-warg'
			}
			{
				'include': '#fusion-functions'
			}
			{
				'include': '#fusion-macros'
			}
			{
				'include': '#fusion-objects'
			}
			{
				'include': '#fusion-properties'
			}
			{
				'include': '#fusion-filters-warg'
			}
			{
				'include': '#fusion-filters'
			}
			{
				'include': '#fusion-filters-warg-ud'
			}
			{
				'include': '#fusion-filters-ud'
			}
			{
				'match': ','
				'name': 'punctuation.separator.object.fusion'
			}
		]
		'name': 'meta.array.fusion'

	'fusion-hashes':
		'begin': '(?<=[\\s\\(\\{\\[:,])\\{'
		'beginCaptures':
			'0':
				'name': 'punctuation.section.hash.begin.fusion'
		'end': '\\}'
		'endCaptures':
			'0':
				'name': 'punctuation.section.hash.end.fusion'
		'patterns': [
			{
				'include': '#fusion-hashes'
			}
			{
				'include': '#fusion-arrays'
			}
			{
				'include': '#fusion-constants'
			}
			{
				'include': '#fusion-strings'
			}
			{
				'include': '#fusion-functions-warg'
			}
			{
				'include': '#fusion-functions'
			}
			{
				'include': '#fusion-macros'
			}
			{
				'include': '#fusion-objects'
			}
			{
				'include': '#fusion-properties'
			}
			{
				'include': '#fusion-filters-warg'
			}
			{
				'include': '#fusion-filters'
			}
			{
				'include': '#fusion-filters-warg-ud'
			}
			{
				'include': '#fusion-filters-ud'
			}
			{
				'match': ':'
				'name': 'punctuation.separator.key-value.fusion'
			}
			{
				'match': ','
				'name': 'punctuation.separator.object.fusion'
			}
		]
		'name': 'meta.hash.fusion'

	'fusion-keyword':
		'match': '(?<=\\s)((?:end)?(autoescape|block|embed|filter|for|if|macro|raw|sandbox|set|spaceless|trans|verbatim)|as|do|else|elseif|exten	|flush|from|ignore missing|import|include|only|use|with)(?=\\s)'
		'name': 'keyword.control.fusion'
	'fusion-functions':
		'captures':
			'1':
				'name': 'support.function.fusion'
		'match': '(?<=is\\s)(defined|empty|even|iterable|none|null|odd)'

	'fusion-macros':
		'begin': '(?x) (?<=[\\s\\(\\[\\{:,]) ([a-zA-Z_\\x{7f}-\\x{ff}][a-zA-Z0-9_\\x{7f}-\\x{ff}]*) (?:								(\\.)([a-zA-Z_\\x{7f}-\\x{ff}][a-zA-Z0-9_\\x{7f}-\\x{ff}]*) ) (\\()' 'beginCaptures':
			'1':
				'name': 'meta.function-call.fusion'
			'2':
				'name': 'punctuation.separator.property.fusion'
			'3':
				'name': 'variable.other.property.fusion'
			'4':
				'name': 'punctuation.definition.parameters.begin.fusion'
		'end': '\\)'
		'endCaptures':
			'0':
				'name': 'punctuation.definition.parameters.end.fusion'
		'patterns': [
			{
				'include': '#fusion-constants'
			}
			{
				'include': '#fusion-functions-warg'
			}
			{
				'include': '#fusion-functions'
			}
			{
				'include': '#fusion-macros'
			}
			{
				'include': '#fusion-objects'
			}
			{
				'include': '#fusion-properties'
			}
			{
				'include': '#fusion-filters-warg'
			}
			{
				'include': '#fusion-filters'
			}
			{
				'include': '#fusion-filters-warg-ud'
			}
			{
				'include': '#fusion-filters-ud'
			}
			{
				'include': '#fusion-strings'
			}
			{
				'include': '#fusion-arrays'
			}
			{
				'include': '#fusion-hashes'
			}
		]
		'contentName': 'meta.function.arguments.fusion'

	'fusion-objects':
		'captures':
			'1':
				'name': 'variable.other.fusion'
		'match': '(?<=[\\s\\{\\[\\(:,])([a-zA-Z_\\x{7f}-\\x{ff}][a-zA-Z0-9_\\x{7f}-\\x{ff}]*)(?=[\\s\\}\\[\\]\\(\\)\\.\\|,:])'

	'fusion-filters-warg':
		'begin': '(?<=(?:[a-zA-Z0-9_\\x{7f}-\\x{ff}\\]\\)\\\'\\"]\\|)|\\{%\\sfilter\\s)(convert_encoding|date|date_modify|default|e|escape|format|join|merge|number_format|replace|slice|split|trim)(\\()'
		'beginCaptures':
			'1':
				'name': 'support.function.fusion'
			'2':
				'name': 'punctuation.definition.parameters.begin.fusion'
		'end': '\\)'
		'endCaptures':
			'0':
				'name': 'punctuation.definition.parameters.end.fusion'
		'patterns': [
			{
				'include': '#fusion-constants'
			}
			{
				'include': '#fusion-functions-warg'
			}
			{
				'include': '#fusion-functions'
			}
			{
				'include': '#fusion-macros'
			}
			{
				'include': '#fusion-objects'
			}
			{
				'include': '#fusion-properties'
			}
			{
				'include': '#fusion-filters-warg'
			}
			{
				'include': '#fusion-filters'
			}
			{
				'include': '#fusion-filters-warg-ud'
			}
			{
				'include': '#fusion-filters-ud'
			}
			{
				'include': '#fusion-strings'
			}
			{
				'include': '#fusion-arrays'
			}
			{
				'include': '#fusion-hashes'
			}
		]
		'contentName': 'meta.function.arguments.fusion'

	'fusion-filters':
		'captures':
			'1':
				'name': 'support.function.fusion'
		'match': '(?<=(?:[a-zA-Z0-9_\\x{7f}-\\x{ff}\\]\\)\\\'\\"]\\|)|\\{%\\sfilter\\s)(abs|capitalize|e(?:scape)?|join|(?:json|url)_encode|keys|length|lower|nl2br|number_format|raw|reverse|sort|striptags|title|trim|upper)(?=[\\s\\|\\]\\}\\):,]|\\.\\.|\\*\\*)'

	'fusion-filters-warg-ud':
		'begin': '(?<=(?:[a-zA-Z0-9_\\x{7f}-\\x{ff}\\]\\)\\\'\\"]\\|)|\\{%\\sfilter\\s)([a-zA-Z_\\x{7f}-\\x{ff}][a-zA-Z0-9_\\x{7f}-\\x{ff}]*)(\\()'
		'beginCaptures':
			'1':
				'name': 'meta.function-call.other.fusion'
			'2':
				'name': 'punctuation.definition.parameters.begin.fusion'
		'end': '\\)'
		'endCaptures':
			'0':
				'name': 'punctuation.definition.parameters.end.fusion'
		'patterns': [
			{
				'include': '#fusion-constants'
			}
			{
				'include': '#fusion-functions-warg'
			}
			{
				'include': '#fusion-functions'
			}
			{
				'include': '#fusion-macros'
			}
			{
				'include': '#fusion-objects'
			}
			{
				'include': '#fusion-properties'
			}
			{
				'include': '#fusion-filters-warg'
			}
			{
				'include': '#fusion-filters'
			}
			{
				'include': '#fusion-filters-warg-ud'
			}
			{
				'include': '#fusion-filters-ud'
			}
			{
				'include': '#fusion-strings'
			}
			{
				'include': '#fusion-arrays'
			}
			{
				'include': '#fusion-hashes'
			}
		]
		'contentName': 'meta.function.arguments.fusion'

	'fusion-filters-ud':
		'captures':
			'1':
				'name': 'meta.function-call.other.fusion'
		'match': '(?<=(?:[a-zA-Z0-9_\\x{7f}-\\x{ff}\\]\\)\\\'\\"]\\|)|\\{%\\sfilter\\s)([a-zA-Z_\\x{7f}-\\x{ff}][a-zA-Z0-9_\\x{7f}-\\x{ff}]*)'

	'tag-generic-attribute':
		'match': '\\b([a-zA-Z\\-:]+)'
		'name': 'entity.other.attribute-name.html'
	'tag-id-attribute':
		'begin': '\\b(id)\\b\\s*(=)'
		'captures':
			'1':
				'name': 'entity.other.attribute-name.id.html'
			'2':
				'name': 'punctuation.separator.key-value.html'
		'end': '(?<=\'|")'
		'name': 'meta.attribute-with-value.id.html'
		'patterns': [
			{
				'begin': '"'
				'beginCaptures':
					'0':
						'name': 'punctuation.definition.string.begin.html'
				'contentName': 'meta.toc-list.id.html'
				'end': '"'
				'endCaptures':
					'0':
						'name': 'punctuation.definition.string.end.html'
				'name': 'string.quoted.double.html'
				'patterns': [
					{
						'include': '#embedded-code'
					}
					{
						'include': '#entities'
					}
				]
			}
			{
				'begin': '\''
				'beginCaptures':
					'0':
						'name': 'punctuation.definition.string.begin.html'
				'contentName': 'meta.toc-list.id.html'
				'end': '\''
				'endCaptures':
					'0':
						'name': 'punctuation.definition.string.end.html'
				'name': 'string.quoted.single.html'
				'patterns': [
					{
						'include': '#embedded-code'
					}
					{
						'include': '#entities'
					}
				]
			}
		]
	'tag-stuff':
		'patterns': [
			{
				'include': '#tag-id-attribute'
			}
			{
				'include': '#tag-generic-attribute'
			}
			{
				'include': '#string-double-quoted'
			}
			{
				'include': '#string-single-quoted'
			}
			{
				'include': '#embedded-code'
			}
		]
